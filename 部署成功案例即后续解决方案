# 腾讯云部署成功案例与解决方案

## 已解决问题

### 1. 500 内部服务器错误 - Nginx权限问题
**问题**: Nginx无法访问前端文件，出现"Permission denied"错误。
**解决方案**: 修改文件权限
```bash
chmod -R 755 /path/to/frontend/files
```

### 2. 前端连接后端API问题
**问题**: 前端代码中硬编码了`localhost:5002`作为API地址。
**解决方案**: 修改前端配置，在生产环境中使用空字符串作为API基础URL，使用相对路径请求API。
```javascript
// 在config.js或vite.config.js中
const apiBaseUrl = import.meta.env.PROD ? '' : 'http://localhost:5002';
```

### 3. 刷新页面后自动退出登录问题
**问题**: 会话Cookie配置和CORS配置不正确。
**解决方案**:
1. 修改Flask会话配置:
   ```python
   app.config.update(
       SESSION_COOKIE_HTTPONLY=True,
       SESSION_COOKIE_SECURE=False,  # 在HTTP环境下使用Cookie
       SESSION_COOKIE_SAMESITE=None, # 允许跨站请求发送Cookie
       SESSION_COOKIE_DOMAIN=None,   # 不限制域名
       SESSION_COOKIE_PATH="/",
   )
   ```

2. 修改CORS配置:
   ```python
   CORS(app,
       resources={r"/*": {"origins": ["http://119.29.168.57", "https://119.29.168.57"]}}, # 具体域名列表替代通配符*
       supports_credentials=True  # 允许跨域请求携带凭证
   )
   ```

3. 设置固定的SECRET_KEY环境变量，确保服务重启后会话仍然有效。

### 4. 上传文件413错误 (Request Entity Too Large)
**问题**: 上传较大文件时出现413错误。
**原因**: Nginx默认对上传文件大小有限制(通常为1MB)。
**解决方案**:
1. 修改Nginx配置增加上传文件大小限制:
   ```bash
   # 编辑Nginx站点配置
   sudo nano /etc/nginx/sites-available/aikepu
   ```

2. 在server块中添加client_max_body_size指令:
   ```nginx
   server {
       listen 80;
       server_name _;

       # 增加上传文件大小限制到50MB
       client_max_body_size 50M;

       location /api {
           proxy_pass http://localhost:5002;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
       }

       # 其他配置...
   }
   ```

3. 重启Nginx:
   ```bash
   sudo systemctl restart nginx
   ```

4. 验证配置:
   ```bash
   # 查看配置是否生效
   sudo cat /etc/nginx/sites-available/aikepu
   ```

### 5. 权限错误(401/403)
**问题**: 访问某些API端点时出现401(未授权)或403(禁止访问)错误。
**原因**: 会话Cookie未正确传递，导致权限验证失败。
**解决方案**:
1. 确认前端请求包含`withCredentials: true`选项:
   ```javascript
   // 在config.js中添加
   import axios from 'axios';
   axios.defaults.withCredentials = true;
   ```
2. 检查后端权限验证逻辑，确保正确检查会话状态:
   ```python
   # 检查admin_required装饰器
   def admin_required(f):
       def decorated_function(*args, **kwargs):
           print(f"检查管理员权限: session={session}")
           if 'user_id' not in session or session.get('user_role') != 'admin':
               return jsonify({'error': '权限不足'}), 403
           print(f"权限验证通过: user_id={session.get('user_id')}, role={session.get('user_role')}")
           return f(*args, **kwargs)
       decorated_function.__name__ = f.__name__
       return decorated_function
   ```
3. 检查CORS配置是否正确允许凭证

### 6. Nginx配置语法错误
**问题**: Nginx服务无法启动，出现"invalid number of arguments in proxy_set_header directive"错误。
**原因**: Nginx配置文件中的proxy_set_header指令缺少值。
**解决方案**:
1. 检查Nginx配置文件:
   ```bash
   sudo cat /etc/nginx/sites-enabled/aikepu
   ```

2. 修复proxy_set_header指令，确保每个指令都有对应的值:
   ```nginx
   # 错误配置
   proxy_set_header Host ;
   proxy_set_header X-Real-IP ;
   
   # 正确配置
   proxy_set_header Host $host;
   proxy_set_header X-Real-IP $remote_addr;
   ```

3. 修复try_files指令:
   ```nginx
   # 错误配置
   try_files / /index.html;
   
   # 正确配置
   try_files $uri /index.html;
   ```

4. 重启Nginx:
   ```bash
   sudo systemctl restart nginx
   ```

### 7. Python依赖缺失导致服务启动失败
**问题**: 后端服务无法启动，出现"ModuleNotFoundError: No module named 'pytz'"错误。
**解决方案**:
1. 在服务器上安装缺失的依赖:
   ```bash
   cd /home/ubuntu/ai-kepu-base/backend
   source venv/bin/activate
   pip install pytz
   ```

2. 重启后端服务:
   ```bash
   sudo systemctl restart aikepu
   ```

3. 确保requirements.txt中包含所有必要的依赖:
   ```bash
   # 更新requirements.txt
   pip freeze > requirements.txt
   ```

## 最终解决方案验证

1. **会话持久性**:
   - 使用curl测试登录和会话保持:
   ```bash
   # 登录
   curl -X POST -H "Content-Type: application/json" -d '{"username":"admin", "password":"admin123"}' http://119.29.168.57/api/auth/login -v -c cookies.txt
   
   # 使用会话测试
   curl -b cookies.txt http://119.29.168.57/api/auth/test -v
   ```

2. **文件上传限制**:
   - 确认Nginx配置已更新:
   ```
   server {
       client_max_body_size 50M;
       listen 80;
       server_name _;
       # ...
   }
   ```
   - 重启服务:
   ```bash
   sudo systemctl restart aikepu.service && sudo systemctl restart nginx
   ```

3. **前端配置**:
   - 确保axios默认配置包含凭证:
   ```javascript
   // config.js
   import axios from 'axios';
   axios.defaults.withCredentials = true;
   ```

4. **依赖检查**:
   - 部署前检查本地和服务器环境依赖是否一致:
   ```bash
   # 本地
   pip freeze > local_requirements.txt
   
   # 服务器
   ssh ubuntu@119.29.168.57 "cd /home/ubuntu/ai-kepu-base/backend && source venv/bin/activate && pip freeze > server_requirements.txt"
   
   # 比较差异
   diff local_requirements.txt server_requirements.txt
   ```

## SSL证书配置建议

当添加SSL证书后，需要进行以下修改:

1. 修改Flask会话配置:
   ```python
   app.config.update(
       SESSION_COOKIE_HTTPONLY=True,
       SESSION_COOKIE_SECURE=True,  # 改为True，只在HTTPS下发送Cookie
       SESSION_COOKIE_SAMESITE='Lax',  # 可以改回Lax
   )
   ```

2. 更新CORS配置中的域名列表，使用https协议:
   ```python
   CORS(app,
       resources={r"/*": {"origins": ["https://yourdomain.com", "https://www.yourdomain.com"]}},
       supports_credentials=True
   )
   ```

3. 配置Nginx SSL:
   ```nginx
   server {
       listen 80;
       server_name yourdomain.com www.yourdomain.com;
       return 301 https://$host$request_uri;  # HTTP重定向到HTTPS
   }

   server {
       listen 443 ssl;
       server_name yourdomain.com www.yourdomain.com;

       ssl_certificate /path/to/cert.pem;
       ssl_certificate_key /path/to/key.pem;
       
       # 其他SSL配置...
       
       # 增加上传文件大小限制
       client_max_body_size 50M;
       
       # 其他配置...
   }
   ```
